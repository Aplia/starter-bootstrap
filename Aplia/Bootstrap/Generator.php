<?php
namespace Aplia\Bootstrap;

use PhpParser\Error;
use PhpParser\ParserFactory;
use Aplia\PhpParser\PrettyPrinter;

/**
 * Bootstrap generator for creating config and PHP code.
 */
class Generator
{
    /**
     * Writes the application bundle to one file.
     * This bundle contains all the bootstrap classes required by
     * the system and the application class.
     */
    public function writeAppBundle($app, $path)
    {
        $parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);
        $prettyPrinter = new PrettyPrinter(array('forceNestedNamespace' => true));

        $code = "";
        $bootstrapMap = $app->config->get('app.bootstrap.classes', array());

        // Copy all referenced classes into one file
        // This will change the namespace declaration to use the nested variation
        // which allows for defining multiple namespaces and classes in one file.
        foreach ($app->config->get('app.bootstrap.names') as $bootstrapName) {
            if (isset($bootstrapMap[$bootstrapName])) {
                $className = $bootstrapMap[$bootstrapName];
                $classReflection = new \ReflectionClass($className);
                $classFileName = $classReflection->getFileName();
                $classCode = file_get_contents($classFileName);
                try {
                    $stmts = $parser->parse($classCode);
                } catch (Error $e) {
                    fwrite(STDERR, "Failed to parse file '$classFileName'\n");
                    throw $e;
                }
                $code .= "// Copied from class $className, file: $classFileName\n";
                $code .= $prettyPrinter->prettyPrint($stmts);
                $code .= "\n\n";
            }
        }

        // Export the settings to an array with certain entries excluded
        $settings = $app->config->exportSettings();
        // Add a new namespace (required) with code for creating the application.
        $code .= "
namespace Aplia\\Bootstrap {
    // Configuration
    \$config = " . var_export($settings, true) . ";\n\n";
        $code .= "    // Create the application
    \$app = \\Aplia\\Bootstrap\\Base::createApp(array(
        'config' => \$config,
    ));
    // We have read the config from a cache file so we should not call configure(),
    // but we still need to call postConfigure()
    \$app->postConfigure();

    if (isset(\$GLOBALS['STARTER_BASE_INIT']) ? \$GLOBALS['STARTER_BASE_INIT'] : true) {
        \$app->init();
    }
    return \$app;
}
";
        $code = "<?php\n// NOTE: Do not edit this file, contents is auto-generated\n" . $code . "\n";
        if (!is_dir(dirname($path))) {
            mkdir($path, 0777, true);
        }
        file_put_contents($path, $code);
    }

    /**
     * Writes the configuration for the application in an optimized form.
     */
    public function writeOptimizedConfig($app, $path)
    {
        $app->config->writeConfig($path);
    }
}
